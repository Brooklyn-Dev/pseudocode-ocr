{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "OCR Pseudocode",
	"patterns": [
		{
			"include": "#subroutines"
		},
		{
			"include": "#classes"
		},
		{
			"include": "#interfaces"
		},
		{
			"include": "#structs"
		},
		{
			"include": "#enums"
		},
		{
			"include": "#properties"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#constants"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.ocr-pseudocode",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"name": "comment.line.double-slash.ocr-pseudocode",
					"begin": "//",
					"end": "$"
				}
			]
		},
		"classes": {
			"patterns": [
				{
					"match": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)",
					"captures": {
						"1": { "name": "storage.type.ocr-pseudocode" },
						"2": { "name": "entity.name.class.ocr-pseudocode" }
					}
				},
				{
					"match": "\\b(inherits)\\s+([A-Za-z_][A-Za-z0-9_]*)",
					"captures": {
						"1": { "name": "storage.type.ocr-pseudocode" },
						"2": { "name": "entity.other.inherited-class.ocr-pseudocode" }
					}
				},
				{
					"match": "\\b(implements)\\s+([A-Za-z_][A-Za-z0-9_]*)",
					"captures": {
						"1": { "name": "storage.type.ocr-pseudocode" },
						"2": { "name": "entity.other.inherited-class.ocr-pseudocode" }
					}
				},
				{
					"match": "\\b([A-Z][A-Za-z0-9_]*)(\\.)([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": { "name": "entity.name.class.ocr-pseudocode" },
						"2": { "name": "punctuation.accessor.ocr-pseudocode" },
						"3": { "name": "support.type.property-name.ocr-pseudocode" }
					}
				}
			]
		},
		"interfaces": {
			"match": "\\b(interface)\\s+([A-Za-z_][A-Za-z0-9_]*)",
			"captures": {
				"1": { "name": "storage.type.ocr-pseudocode" },
				"2": { "name": "entity.name.class.ocr-pseudocode" }
			}
		},
		"structs": {
			"match": "\\b(struct)\\s+([A-Za-z_][A-Za-z0-9_]*)",
			"captures": {
				"1": { "name": "storage.type.ocr-pseudocode" },
				"2": { "name": "entity.name.class.ocr-pseudocode" }
			}
		},
		"enums": {
			"match": "\\b(enum)\\s+([A-Za-z_][A-Za-z0-9_]*)",
			"captures": {
				"1": { "name": "storage.type.ocr-pseudocode" },
				"2": { "name": "entity.name.class.ocr-pseudocode" }
			}
		},
		"subroutines": {
			"patterns": [
				{
					"begin": "\\b(procedure|function)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
					"end": "\\)",
					"beginCaptures": {
						"1": { "name": "storage.type.ocr-pseudocode" },
						"2": { "name": "entity.name.function.ocr-pseudocode" }
					},
					"patterns": [
						{
							"name": "storage.modifier.ocr-pseudocode",
							"match": "\\b(byVal|byRef|const)\\b"
						},
						{
							"name": "variable.parameter.ocr-pseudocode",
							"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
						}
					]
				},
				{
					"name": "entity.name.function.ocr-pseudocode",
					"match": "\\b(?!(?:if|then|elseif|elif|else|endif|switch|case|default|endswitch|while|endwhile|do|until|for|to|step|each|in|next|continue|break|return|try|catch|finally|throw|raise|endtry|await|AND|OR|NOT|XOR|LSHIFT|RSHIFT|=|==|!=|<|<=|>|>=|\\+|\\-|\\*|\\/|MOD|DIV|\\^)\\b)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()"
				}
			]
		},
		"properties": {
			"name": "support.type.property-name.ocr-pseudocode",
			"match": "(?<=\\.)\\b(length|size|count)"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ocr-pseudocode",
					"match": "\\b(if|then|elseif|elif|else|endif|switch|case|default|endswitch|while|endwhile|do|until|for|to|step|each|in|next|continue|break|return|try|catch|finally|throw|raise|endtry|await)\\b"
				},
				{
					"name": "storage.type.ocr-pseudocode",
					"match": "\\b(class|super|endclass|new|endinterface|procedure|endprocedure|function|endfunction|endstruct|endenum|array)\\b"
				},
				{
					"name": "storage.modifier.ocr-pseudocode",
					"match": "\\b(public|protected|private|static|const|readonly|global|local|async|abstract)\\b"
				},
				{
					"name": "constant.language.ocr-pseudocode",
					"match": "\\b(true|false|null|undefined)\\b"
				},
				{
					"name": "variable.language.ocr-pseudocode",
					"match": "\\b(this|self)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.ocr-pseudocode",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ocr-pseudocode",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.ocr-pseudocode",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.ocr-pseudocode",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.ocr-pseudocode",
					"match": "\\b0[bB][01]+\\b"
				},
				{
					"name": "constant.numeric.ocr-pseudocode",
					"match": "\\b0[oO][0-7]+\\b"
				},
				{
					"name": "constant.numeric.ocr-pseudocode",
					"match": "\\b0[xX][A-Fa-f0-9]+\\b"
				},
				{
					"name": "constant.numeric.ocr-pseudocode",
					"match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.word.ocr-pseudocode",
					"match": "\\b(AND|OR|NOT|XOR|LSHIFT|RSHIFT|MOD|DIV)\\b"
				},
				{
					"name": "keyword.operator.symbol.ocr-pseudocode", 
					"match": "(==|!=|<=|>=|=|<|>|\\+|\\-|\\*|\\/|\\^)"
				}
			]
		},
		"constants": {
			"name": "constant.language",
			"match": "\\b[A-Z][A-Z0-9_]*\\b"
		}
	},
	"scopeName": "source.ocr-pseudocode"
}
